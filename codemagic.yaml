workflows:
  default-workflow:
    name: Rally FE workflow
    instance_type: mac_mini_m2
    max_build_duration: 60
    environment:
      groups:
        - keystore_credentials
        - app_store_credentials
        - manual_cert_credentials
        - firebase_credentials
        - azure_credentials
        - other
      flutter: stable
      xcode: latest
      cocoapods: default
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "*"
          include: true
          source: true
      cancel_previous_builds: false
    cache:
      cache_paths:
        - $FLUTTER_ROOT/.pub-cache
        - $HOME/.gradle/caches
        - $HOME/.gradle/wrapper
        - $HOME/Library/Caches/CocoaPods
        - $CM_BUILD_DIR/node_modules
    scripts:
      - name: Installing Dependencies
        script: |
          set -e
          sudo apt-get update && sudo apt-get install -y curl jq
          echo "Installing dependencies..."
          flutter clean
          flutter pub get
      - name: Build Android
        script: |
          set -e
          echo "Building Android APK and AppBundle..."
          flutter build apk --release
          flutter build appbundle --release
      - name: Build iOS
        script: |
          set -e
          echo "Building iOS..."
          flutter build ios --release --no-codesign
      - name: Get OAuth2 token
        script: |
          set -e
          TOKEN=$(curl -X POST -H "Content-Type: application/x-www-form-urlencoded" \
            -d "client_id=$CLIENT_ID&scope=https://graph.microsoft.com/.default&client_secret=$CLIENT_SECRET&grant_type=client_credentials" \
            "https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/token" \
            | jq -r .access_token)

          echo "TOKEN=$TOKEN" >> $CM_ENV
      - name: Upload appbundle to OneDrive
        script: |
          set -e
          FILE_PATH="build/app/outputs/bundle/release/app-release.aab"
          UPLOAD_NAME="app-release-$(date +%Y%m%d%H%M%S).aab"

          echo "Uploading $UPLOAD_NAME to OneDrive..."
          START_TIME=$(date +%s)

          RESPONSE=$(curl -s -w "%{http_code}" -o upload_result_aab.json \
            -X PUT \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$FILE_PATH" \
            "https://graph.microsoft.com/v1.0/me/drive/root:/Codemagic/$UPLOAD_NAME:/content")

          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))

          if [ "$RESPONSE" != "201" ] && [ "$RESPONSE" != "200" ]; then
            echo "Upload failed with HTTP $RESPONSE after ${DURATION}s"
            cat upload_result_aab.json
            exit 1
          fi

          FILE_ID=$(jq -r '.id' upload_result_aab.json)
          FILE_WEBURL=$(jq -r '.webUrl' upload_result_aab.json)
          echo "Upload successful: $FILE_WEBURL (ID: $FILE_ID)"
          echo "⏱ Duration: ${DURATION}s"

      - name: Upload APK to OneDrive
        script: |
          set -e
          FILE_PATH="build/app/outputs/flutter-apk/app-release.apk"
          UPLOAD_NAME="app-release-$(date +%Y%m%d%H%M%S).apk"

          echo "Uploading $UPLOAD_NAME to OneDrive..."
          START_TIME=$(date +%s)

          RESPONSE=$(curl -s -w "%{http_code}" -o upload_result_apk.json \
            -X PUT \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/vnd.android.package-archive" \
            --data-binary @"$FILE_PATH" \
            "https://graph.microsoft.com/v1.0/me/drive/root:/Codemagic/$UPLOAD_NAME:/content")

          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))

          if [ "$RESPONSE" != "201" ] && [ "$RESPONSE" != "200" ]; then
            echo "Upload failed with HTTP $RESPONSE after ${DURATION}s"
            cat upload_result_apk.json
            exit 1
          fi

          FILE_ID=$(jq -r '.id' upload_result_apk.json)
          FILE_WEBURL=$(jq -r '.webUrl' upload_result_apk.json)
          echo "Upload successful: $FILE_WEBURL (ID: $FILE_ID)"
          echo "⏱ Duration: ${DURATION}s"

    artifacts:
      - build/app/outputs/flutter-apk/*.apk
      - build/app/outputs/bundle/release/*.aab
      - build/ios/ipa/*.ipa
      - build/web/**/*
    publishing:
      email:
        recipients:
          - khang.nguyen@rally-go.com
      scripts:
        - name: Custom publishing step
          script: |
            echo "Publishing build artifacts..."
